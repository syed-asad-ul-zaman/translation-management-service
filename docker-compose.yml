version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: translation-management-service:latest
    container_name: translation-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - translation-network
    depends_on:
      - database
      - redis
      - elasticsearch
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=http://localhost:8080
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=translation_management
      - DB_USERNAME=translation_user
      - DB_PASSWORD=secure_password
      - CACHE_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200

  # Web Server Service (Nginx)
  webserver:
    image: nginx:alpine
    container_name: translation-webserver
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - translation-network
    depends_on:
      - app

  # Database Service
  database:
    image: mysql:8.0
    container_name: translation-database
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: translation_management
      MYSQL_USER: translation_user
      MYSQL_PASSWORD: secure_password
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    volumes:
      - translation-db-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    networks:
      - translation-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Service for Caching
  redis:
    image: redis:7-alpine
    container_name: translation-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - translation-redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6380:6379"
    networks:
      - translation-network

  # Elasticsearch for Full-text Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: translation-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - translation-es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - translation-network

  # Queue Worker Service
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: translation-queue-worker
    restart: unless-stopped
    command: php artisan queue:work --tries=3 --timeout=60 --sleep=3 --max-jobs=1000 --max-time=3600
    volumes:
      - ./:/var/www/html
    networks:
      - translation-network
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis

  # Scheduler Service
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: translation-scheduler
    restart: unless-stopped
    command: crond -f -l 2
    volumes:
      - ./:/var/www/html
      - ./docker/cron/laravel-cron:/etc/crontabs/root
    networks:
      - translation-network
    depends_on:
      - database
      - redis

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: translation-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - translation-prometheus-data:/prometheus
    networks:
      - translation-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: translation-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - translation-grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - translation-network

# Networks
networks:
  translation-network:
    driver: bridge

# Volumes
volumes:
  translation-db-data:
    driver: local
  translation-redis-data:
    driver: local
  translation-es-data:
    driver: local
  translation-prometheus-data:
    driver: local
  translation-grafana-data:
    driver: local
